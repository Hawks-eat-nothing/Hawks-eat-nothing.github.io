<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>java 泛型十问</title>
    <link href="/2022/05/08/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2022/05/08/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Java中的泛型是什么？使用泛型的好处是？"><a href="#1-Java中的泛型是什么？使用泛型的好处是？" class="headerlink" title="1. Java中的泛型是什么？使用泛型的好处是？"></a>1. Java中的泛型是什么？使用泛型的好处是？</h2><p>在集合中存储对象并在使用前进行类型转换是多么的不方便。泛型防止了那种情况的发生。它提供了编译期的类型安全，确保你只能把正确类型的对象放入集合中，避免了在运行时出现ClassCastException。</p><h2 id="2-Java泛型是如何工作的？什么是类型擦除？"><a href="#2-Java泛型是如何工作的？什么是类型擦除？" class="headerlink" title="2. Java泛型是如何工作的？什么是类型擦除？"></a>2. Java泛型是如何工作的？什么是类型擦除？</h2><p>泛型是通过类型擦除实现的。编译器在编译时擦除了所有类型相关的信息，所以在运行时不存在任何类型相关的信息。例如：<code>List&lt;String&gt;</code>在运行时仅用一个List来表示。这样做的目的是确保能和Java5之前的版本开发二进制库进行兼容。你List<String> stringList;<br>objectList&#x3D;stringL&#x2F;&#x2F;compilation error incompatible typesist;无法在运行时访问到类型参数。因为编译器已经把泛型类型转换成了原始类型。</p><h2 id="3-Array中可以使用泛型吗？"><a href="#3-Array中可以使用泛型吗？" class="headerlink" title="3. Array中可以使用泛型吗？"></a>3. Array中可以使用泛型吗？</h2><p>Array并不支持泛型，所以Effective Java一书中建议使用List来替代Array,因为List可以<br>提供编译期的类型安全保证，而Array不能。</p><h2 id="4-如何阻止Java中的类型-未检查的警告"><a href="#4-如何阻止Java中的类型-未检查的警告" class="headerlink" title="4. 如何阻止Java中的类型#未检查的警告"></a>4. 如何阻止Java中的类型#未检查的警告</h2><p>如果你把泛型和原始类型混合起来使用，Java 5的javac编译器会产生类型未检查的警告，例如：<br><code>List&lt;String&gt; rawLsit = new ArrayList&lt;&gt;();</code># 3. 什么是泛型中的限定通配符和非限定通配符<br>限定通配符对类型进行了限制。有两种类型的限定通配符，一种是<code>&lt;? extends T&gt;</code>, 它通过确保类型必须是T的子类来设定类型的上界，另一种是<code>&lt;? super T&gt;</code>, 它通过确保累心给必须是T的父类来设定类型的下界。泛型类型必须用限定内的类型来进行初始化，否则会导致编译错误。另一方面<code>&lt;?&gt;</code> 表示了<strong>非限定通配符</strong>，因为<code>&lt;?&gt;</code>可以用任意类型来代替。</p><h2 id="5-List-lt-extends-T-gt-和-List-lt-super-T-gt-之间有什么区别？"><a href="#5-List-lt-extends-T-gt-和-List-lt-super-T-gt-之间有什么区别？" class="headerlink" title="5. List&lt;? extends T&gt; 和 List&lt;? super T&gt; 之间有什么区别？"></a>5. <code>List&lt;? extends T&gt;</code> 和 List&lt;? super T&gt; 之间有什么区别？</h2><p>这两个List的声明都是限定通配符的例子，<code>List&lt;? extends T&gt;</code>可以接受任何继承自T的类型的List, 而<code>List&lt;? super T&gt;</code> 可以接受任何T的父类构成的List. 例如<code>List&lt;? extends Number&gt;</code> 可以接受<code>List&lt;Integer&gt;</code> 和 <code>List&lt;Float&gt;</code>。</p><h2 id="6-如何编写一个泛型方法，让他能够接受泛型参数并返回泛型类型"><a href="#6-如何编写一个泛型方法，让他能够接受泛型参数并返回泛型类型" class="headerlink" title="6. 如何编写一个泛型方法，让他能够接受泛型参数并返回泛型类型"></a>6. 如何编写一个泛型方法，让他能够接受泛型参数并返回泛型类型</h2><p>需要用泛型类型来替代原始类型，比如使用T,E,K,V等被广泛认可的类型占位符。泛型方法的例子可能会像这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key,V value)</span>&#123;<br>    <span class="hljs-keyword">return</span> cache.put(key,value);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-Java中如何使用泛型编写带参数的类？"><a href="#7-Java中如何使用泛型编写带参数的类？" class="headerlink" title="7. Java中如何使用泛型编写带参数的类？"></a>7. Java中如何使用泛型编写带参数的类？</h2><h2 id="8-编写一段泛型程序来实现LRU缓存？"><a href="#8-编写一段泛型程序来实现LRU缓存？" class="headerlink" title="8. 编写一段泛型程序来实现LRU缓存？"></a>8. 编写一段泛型程序来实现LRU缓存？</h2><p>LinkedHashMap可以用来实现固定大小的LRU缓存，当LRU缓存已经满了的时候，他会把最老的键值对移出缓存。LinkedHashMap提供了一个成为removeEldeestEntry() 的方法，该方法会被put()和putAll() 调用来删除最老的键值对。</p><h2 id="9-你可以把List-lt-String-gt-传递给一个接受List-lt-Object-gt-参数的方法吗？"><a href="#9-你可以把List-lt-String-gt-传递给一个接受List-lt-Object-gt-参数的方法吗？" class="headerlink" title="9. 你可以把List&lt;String&gt;传递给一个接受List&lt;Object&gt;参数的方法吗？"></a>9. 你可以把<code>List&lt;String&gt;</code>传递给一个接受<code>List&lt;Object&gt;</code>参数的方法吗？</h2><p>不能。<code>List&lt;Object&gt;</code>可以存储任何类型的对象包括String,Integer等等，而<code>List&lt;String&gt;</code>只能用来存储String。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Object&gt; objectList;<br>List&lt;String&gt; stringList;<br>objectList=stringList;<span class="hljs-comment">//compilation error incompatible types</span><br></code></pre></td></tr></table></figure><h2 id="10-Array中可以使用泛型吗？"><a href="#10-Array中可以使用泛型吗？" class="headerlink" title="10. Array中可以使用泛型吗？"></a>10. Array中可以使用泛型吗？</h2><p>Array并不支持泛型，所以Effective Java一书中建议使用List来替代Array,因为List可以提供编译期的类型安全保证，而Array不能。</p><h2 id="11-如何阻止Java中的类型未检查的警告"><a href="#11-如何阻止Java中的类型未检查的警告" class="headerlink" title="11. 如何阻止Java中的类型未检查的警告"></a>11. 如何阻止Java中的类型未检查的警告</h2><p>如果你把泛型和原始类型混合起来使用，Java 5的javac编译器会产生类型未检查的警告，例如：</p><p><code>List&lt;String&gt; rawLsit = new ArrayList&lt;&gt;();</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/08/hello-world/"/>
    <url>/2022/05/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
